<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务 on 技术博客</title>
    <link>https://mingyu.lighting/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 微服务 on 技术博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mingyu.lighting/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微服务架构开发培训系列课程一</title>
      <link>https://mingyu.lighting/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91%E5%9F%B9%E8%AE%AD%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B%E4%B8%80/</link>
      <pubDate>Fri, 02 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mingyu.lighting/posts/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91%E5%9F%B9%E8%AE%AD%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B%E4%B8%80/</guid>
      <description>&lt;p&gt;最近对公司内部进行了微服务开发的系列培训课程，本文是微服务开发相关，后续还有微服务治理等系列分享培训。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-个人介绍&#34;&gt;1. 个人介绍&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;刘晋勋，曾在华为、阿里云、字节跳动担任多年技术架构师和技术团队TL，阿里云技术最佳实践、阿里云CADT作者&lt;/li&gt;&#xA;&lt;li&gt;开源爱好者，Kubernetes和lstio贡献者，多年关注云原生、软件架构与开发、云基础架构、Al&lt;/li&gt;&#xA;&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/mingyu110&#34;&gt;https://github.com/mingyu110&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;个人公众号：公共云与AI&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-微服务架构的优劣势&#34;&gt;2. 微服务架构的优劣势&lt;/h2&gt;&#xA;&lt;p&gt;微服务架构作为系统设计的四大支柱之一（Scalability)，在近年的技术架构设计里得到了越来越多的应用&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://mingyu.lighting/images/f3fafaeec7467b325abf17dbb988840218e5a84efad8396fd826c33dfd2d94c7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-两个披萨团队法则&#34;&gt;2.1 &amp;ldquo;两个披萨&amp;quot;团队法则&lt;/h3&gt;&#xA;&lt;p&gt;亚马逊CEO杰夫·贝索斯提出的&amp;quot;两个披萨团队&amp;rdquo;(Two PizzaTeam)法则：团队规模应小到两个披萨能够喂饱，通常为6-8人。该法则与微服务架构高度契合：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;小团队提高沟通效率，减少协调成本&lt;/li&gt;&#xA;&lt;li&gt;团队规模对应服务粒度：每个&amp;quot;两个披萨团队&amp;quot;(6-8人)通常负责一个或少数几个微服务&lt;/li&gt;&#xA;&lt;li&gt;增强团队自主性和对服务的端到端责任感&lt;/li&gt;&#xA;&lt;li&gt;允许团队专注于单一业务能力或服务&lt;/li&gt;&#xA;&lt;li&gt;促进快速决策和迭代&lt;/li&gt;&#xA;&lt;li&gt;支持敏捷开发和DevOps文化&lt;/li&gt;&#xA;&lt;li&gt;康威定律体现：系统设计反映组织通信结构，小团队自然产生边界清晰的微服务&lt;/li&gt;&#xA;&lt;li&gt;团队边界应与服务边界一致：避免一个服务由多个团队维护，除了共享服务（基础设施团队或者平台团队可以负责多个共享服务）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-微服务架构的优势&#34;&gt;2.2 微服务架构的优势&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;技术异构性：可使用不同技术栈构建不同服务&lt;/li&gt;&#xA;&lt;li&gt;弹性：单个服务故障不会导致整个系统崩溃&lt;/li&gt;&#xA;&lt;li&gt;可扩展性：可按需独立扩展各服务而非整体应用&lt;/li&gt;&#xA;&lt;li&gt;易于部署：支持独立部署，降低整体风险&lt;/li&gt;&#xA;&lt;li&gt;组织对齐：团队可围绕业务能力组织，而非技术层次&lt;/li&gt;&#xA;&lt;li&gt;可组合性：服务可灵活组合构建新功能&lt;/li&gt;&#xA;&lt;li&gt;可替代性：服务可独立替换或重写，减少大规模重构&lt;/li&gt;&#xA;&lt;li&gt;独立演进：各服务可按不同速度和方向发展&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23-微服务架构的劣势&#34;&gt;2.3 微服务架构的劣势&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式系统复杂性：引入网络延迟、分区容错等挑战&lt;/li&gt;&#xA;&lt;li&gt;运维成本高：需管理更多服务、监控和基础设施&lt;/li&gt;&#xA;&lt;li&gt;服务间通信成本：增加网络开销和故障点&lt;/li&gt;&#xA;&lt;li&gt;跨服务事务难：分布式事务实现复杂&lt;/li&gt;&#xA;&lt;li&gt;测试复杂度增加：集成测试和端到端测试变得困难&lt;/li&gt;&#xA;&lt;li&gt;数据一致性挑战：多数据库环境下保持一致性困难&lt;/li&gt;&#xA;&lt;li&gt;服务治理难度大：需要更完善的服务发现、配置管理等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;24-单体应用拆分为微服务架构应用的示范和理念&#34;&gt;2.4 单体应用拆分为微服务架构应用的示范和理念&lt;/h3&gt;&#xA;&lt;h4 id=&#34;241-拆分示范&#34;&gt;2.4.1 拆分示范&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://mingyu.lighting/images/0b631d9837c31b50fff3a21b8ae45de26655dd818bb3905a2b8ee0dacaaf4260.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;242-单一代码仓库模式&#34;&gt;2.4.2 单一代码仓库模式&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;谷歌、Facebook和微软等科技巨头在管理数百个微服务时都采用monorepo（单一代码仓库）模式，证明了即使在非常大规模的微服务架构下，monorepo依然可行且高效。Monorepo不会消除微服务间的边界，而是提供一个更高效的协作环境，使微服务开发更加顺畅和一致。解决微服务特有问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;依赖管理: 简化服务间共享代码的版本控制和依赖传播&lt;/li&gt;&#xA;&lt;li&gt;重构友好：跨服务API变更可同步进行，消除多仓库协调开销&lt;/li&gt;&#xA;&lt;li&gt;开发体验：简化本地开发环境设置，一次克隆可访问所有服务&lt;/li&gt;&#xA;&lt;li&gt;知识共享：促进团队间代码复用和最佳实践传播&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Monorepo（单一代码仓库）架构示范&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://mingyu.lighting/images/01de79444a7974b3a1f92c464a35c999e9f01c83de2742f8e0ac4dae8506429e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;243-数据库拆分模式&#34;&gt;2.4.3 数据库拆分模式&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;微服务拆分的前提理念除了上述的单一代码仓库，数据库拆分模式也需要架构师提前根据不同的维度考虑选择，如下是微服务数据库拆分模式方案示意图以及选型考量表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://mingyu.lighting/images/102f8a2247483d7644c5eff2a57eb1b6586d21c74671f3fb2c98c198ff1f068b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;244-api-first设计理念&#34;&gt;2.4.4 API-First设计理念&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;API-First的原则&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以API设计作为基础：在API优先的方法中，API是整个应用构建的基础。这需要精心规划和设计，以确保API满足所有利益相关者的需求，包括但不限于开发者、测试、合作伙伴和最终用户。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://mingyu.lighting/images/ee65afc362856bd6ce75920274efdf685046166a1c2585b7e3561013f98e9388.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;一致性与可重用性：API设计为在不同项目和应用中具有一致性和可重用性。这使得标准化变得简单,减少了开发时间，提升了解决方案的可扩展性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;协作与文档：API优先的方法强调开发团队、业务利益相关者和外部合作伙伴之间的协作。全面的文档对于确保每个人了解如何有效使用API至关重要。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;测试驱动开发：从一开始就对API进行严格的测试，以便在开发过程中尽早识别和解决问题。这有助于保持高质量标准，并降低后期出现昂贵错误的风险。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;API-First的收益&lt;/p&gt;</description>
    </item>
    <item>
      <title>Istio 服务网格入门指南</title>
      <link>https://mingyu.lighting/posts/istio-introduction/</link>
      <pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://mingyu.lighting/posts/istio-introduction/</guid>
      <description>&lt;h2 id=&#34;什么是-istio&#34;&gt;什么是 Istio？&lt;/h2&gt;&#xA;&lt;p&gt;Istio 是一个开源的服务网格平台，它提供了一种统一的方式来管理、连接和保护微服务。作为一个服务网格，Istio 在不修改应用程序代码的情况下，为分布式应用程序提供了流量管理、安全性和可观察性等关键功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;istio-的核心功能&#34;&gt;Istio 的核心功能&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-流量管理&#34;&gt;1. 流量管理&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;智能路由和负载均衡&lt;/li&gt;&#xA;&lt;li&gt;流量分流和金丝雀发布&lt;/li&gt;&#xA;&lt;li&gt;故障注入和熔断&lt;/li&gt;&#xA;&lt;li&gt;A/B 测试&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-安全&#34;&gt;2. 安全&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;服务间身份验证&lt;/li&gt;&#xA;&lt;li&gt;访问控制和授权&lt;/li&gt;&#xA;&lt;li&gt;加密通信（mTLS）&lt;/li&gt;&#xA;&lt;li&gt;证书管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-可观察性&#34;&gt;3. 可观察性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式追踪&lt;/li&gt;&#xA;&lt;li&gt;访问日志&lt;/li&gt;&#xA;&lt;li&gt;服务监控&lt;/li&gt;&#xA;&lt;li&gt;性能指标&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;istio-架构&#34;&gt;Istio 架构&lt;/h2&gt;&#xA;&lt;p&gt;Istio 服务网格在逻辑上分为数据平面和控制平面：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据平面&lt;/strong&gt;：由部署为 sidecar 的 Envoy 代理组成&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;控制平面&lt;/strong&gt;：由 istiod 组成，负责管理和配置代理&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;快速开始&#34;&gt;快速开始&lt;/h2&gt;&#xA;&lt;h3 id=&#34;安装-istio&#34;&gt;安装 Istio&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -L https://istio.io/downloadIstio | sh -&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd istio-*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PWD/bin:$PATH&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;istioctl install --set profile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;demo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;部署示例应用&#34;&gt;部署示例应用&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl label namespace default istio-injection&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;enabled&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;最佳实践&#34;&gt;最佳实践&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从小规模开始，逐步扩大部署范围&lt;/li&gt;&#xA;&lt;li&gt;合理配置资源限制&lt;/li&gt;&#xA;&lt;li&gt;监控关键指标&lt;/li&gt;&#xA;&lt;li&gt;定期更新版本&lt;/li&gt;&#xA;&lt;li&gt;建立备份和恢复策略&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;常见问题&#34;&gt;常见问题&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;性能开销&lt;/strong&gt;：如何优化 sidecar 资源使用&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;调试难度&lt;/strong&gt;：如何有效排查服务网格问题&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;配置复杂性&lt;/strong&gt;：如何简化和管理配置&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&#xA;&lt;p&gt;Istio 作为一个功能强大的服务网格平台，为微服务架构提供了完整的解决方案。通过合理使用 Istio，可以显著提升服务的可靠性、安全性和可观察性。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
